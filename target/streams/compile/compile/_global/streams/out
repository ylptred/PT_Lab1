[debug] Acquiring lock on file D:\ЖаваБИ\PT_Lab1\project\target\.sbt-compilation-infos\root-compile\.sbt-idea-lock ...
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:6:37: value serviceName is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                     ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:6:55: value price is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                       ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:6:67: value deadline is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                                   ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:6:82: value subprice is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                                                  ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:7:34: value serviceName is not a member of sorting.Data
[error]     if (this.serviceName < other.serviceName) {
[error]                                  ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:9:42: value serviceName is not a member of sorting.Data
[error]     } else if (this.serviceName == other.serviceName) {
[error]                                          ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:10:30: value price is not a member of sorting.Data
[error]       if (this.price < other.price) {
[error]                              ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:12:38: value price is not a member of sorting.Data
[error]       } else if (this.price == other.price) {
[error]                                      ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:13:35: value deadline is not a member of sorting.Data
[error]         if (this.deadline < other.deadline) {
[error]                                   ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:15:43: value deadline is not a member of sorting.Data
[error]         } else if (this.deadline == other.deadline) {
[error]                                           ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:16:37: value subprice is not a member of sorting.Data
[error]           if (this.subprice < other.subprice) {
[error]                                     ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:33:37: value serviceName is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                     ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:33:55: value price is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                       ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:33:67: value deadline is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                                   ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:33:82: value subprice is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                                                  ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:34:50: value serviceName is not a member of sorting.Data
[error]     (this < other) || (this.serviceName == other.serviceName && this.price == other.price &&
[error]                                                  ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:34:85: value price is not a member of sorting.Data
[error]     (this < other) || (this.serviceName == other.serviceName && this.price == other.price &&
[error]                                                                                     ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:35:30: value deadline is not a member of sorting.Data
[error]       this.deadline == other.deadline && this.subprice == other.subprice)
[error]                              ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:35:65: value subprice is not a member of sorting.Data
[error]       this.deadline == other.deadline && this.subprice == other.subprice)
[error]                                                                 ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:39:37: value serviceName is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                     ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:39:55: value price is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                       ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:39:67: value deadline is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                                   ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:39:82: value subprice is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                                                  ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:44:37: value serviceName is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                     ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:44:55: value price is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                       ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:44:67: value deadline is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                                   ^
[error] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Data.scala:44:82: value subprice is not a member of sorting.Data
[error]     val other: Data = new Data(that.serviceName, that.price, that.deadline, that.subprice)
[error]                                                                                  ^
[warn] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Working.scala:9:69: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `printToFile`'s return type
[warn]   def printToFile(f: java.io.File)(op: java.io.PrintWriter => Unit) {
[warn]                                                                     ^
[warn] D:\ЖаваБИ\PT_Lab1\src\main\scala\sorting\Working.scala:25:30: Auto-application to `()` is deprecated. Supply the empty argument list `()` explicitly to invoke method getLines,
[warn] or remove the empty argument list from its definition (Java-defined methods are exempt).
[warn] In Scala 3, an unapplied method like this will be eta-expanded into a function.
[warn]     for (line <- data_source.getLines.drop(1)) {
[warn]                              ^
[warn] D:\ЖаваБИ\PT_Lab1\src\main\scala\utils\data\MakeCSV.scala:22:36: Auto-application to `()` is deprecated. Supply the empty argument list `()` explicitly to invoke method getLines,
[warn] or remove the empty argument list from its definition (Java-defined methods are exempt).
[warn] In Scala 3, an unapplied method like this will be eta-expanded into a function.
[warn]       for (line <- services_source.getLines.drop(1)) {
[warn]                                    ^
[warn] three warnings found
[error] 27 errors found
[debug] Releasing lock on file D:\ЖаваБИ\PT_Lab1\project\target\.sbt-compilation-infos\root-compile\.sbt-idea-lock.
